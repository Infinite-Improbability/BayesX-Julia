using DelimitedFiles

export PlaintextData

"""
    PlaintextData(observation::AbstractString, background::AbstractString, arf::AbstractString, rmf::AbstractString, shape::NTuple{3,Int}, rmf_shape::NTuple{2,Int}, obs_exposure_time::Unitful.Time, bg_exposure_time::Unitful.Time, pixel_edge_angle::DimensionfulAngles.Angle, rmf_unit::Unitful.Area)

Store preprocessed data from plaintext files with whitespace delimiters.

Events and response files provided as paths. This data is assumed to have the appropriate binning and energy ranges already applied.
The `shape` of the event arrays should be `(channels, x, y)` and the `rmf_shape` should be (channels, bins).
"""
struct PlaintextData{S<:AbstractString,T<:Unitful.Time,U<:DimensionfulAngles.Angle,V<:Unitful.Area} <: Dataset
    observation::S
    background::S
    arf::S
    rmf::S
    shape::NTuple{3,Int}
    rmf_shape::NTuple{2,Int}
    obs_exposure_time::T
    bg_exposure_time::T
    pixel_edge_angle::U
    rmf_unit::V
end

"""
    load_data(data::PlaintextData)

Load data from plaintext files as generated by existing Bayes-X binning scripts.

Data is reshaped to the given size so should be provided in column-major order
or in a matrix of correct size.
"""
function load_data(data::PlaintextData)::NTuple{2,Pair}
    obs_data = reshape(readdlm(data.observation, Int), data.shape)
    bg_data = reshape(readdlm(data.background, Int), data.shape)
    return (obs_data => data.obs_exposure_time, bg_data => data.bg_exposure_time)
end

"""
    load_response(data::PlaintextData, _)

Load response matrix from plaintext files as generated by existing Bayes-X binning scripts.

Data is reshaped to the given size so should be provided in column-major order
or as a matrix of correct size.
"""
function load_response(data::PlaintextData, _)::Matrix{Unitful.Area{Float64}}
    rmf = reshape(readdlm(data.rmf), data.rmf_shape)
    arf = reshape(readdlm(data.arf), data.rmf_shape[2])

    for i in axes(rmf, 1)
        rmf[i, :] .*= arf
    end

    return rmf * data.rmf_unit
end

"""
    bin_events(::PlaintextData, events, ...)

Placeholder function, returns events matrix without modification"""
function bin_events(_::PlaintextData, events, args...)
    @mpiwarn "PlaintextData does not support binning. Data will be used unmodified."
    return events
end